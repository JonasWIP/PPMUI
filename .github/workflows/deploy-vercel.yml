name: Deploy to Vercel

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4

      # Setup Node.js with improved caching
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      # Run tests before other steps
      - name: Run Tests
        run: npm run test
        
      # Run linter to check code quality
      - name: Run Linter
        run: npm run lint

      - name: Check Build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: npm run build

      # Supabase CLI version check
      - name: Check Supabase CLI Version
        run: npx supabase --version
        
      # Supabase deployment steps
      - name: Link Supabase Project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
          YOUR_PROJECT_REF: ${{ secrets.YOUR_PROJECT_REF }}
        run: |
          echo "Linking to Supabase project: $YOUR_PROJECT_REF"
          npm run supabase:link -- --project-ref $YOUR_PROJECT_REF --password $SUPABASE_DB_PASSWORD

      # Deploy database with debug mode for detailed error output
      - name: Deploy Database Migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
          YOUR_PROJECT_REF: ${{ secrets.YOUR_PROJECT_REF }}
        run: |
          echo "Running database push with debug mode"
          # Attempt with debug mode to get more details on errors
          npx supabase db push --debug || {
            echo "Database push failed with debug mode. Trying with password entered manually..."
            # Try an alternative approach with password specified directly
            echo "$SUPABASE_DB_PASSWORD" | npx supabase db push
          }

      # Enhanced Supabase Functions Deployment
      - name: Deploy Supabase Functions
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          # List existing functions for logging
          echo "Listing deployed functions:"
          npm run supabase:functions:list
          
          # Deploy all functions
          echo "Deploying all functions:"
          npm run supabase:functions:deploy
          
          # Or deploy specific functions if needed
          # echo "Deploying hello-world function:"
          # npm run supabase:functions:deploy:hello-world
          
          # Verify functions were deployed
          echo "Verifying deployed functions:"
          npm run supabase:functions:list
          # Vercel deployment steps
      - name: Setup Vercel Project
        run: |
          # Ensure project name is lowercase
          PROJECT_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          # Remove any non-alphanumeric characters except .-_ and replace with dashes
          PROJECT_NAME=$(echo "$PROJECT_NAME" | sed 's/[^a-z0-9\._-]/-/g')
          # Remove any instances of three consecutive dashes
          PROJECT_NAME=$(echo "$PROJECT_NAME" | sed 's/---/-/g')
          
          echo "Using project name: $PROJECT_NAME"
          
          # Try to pull existing project configuration
          if ! npx vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}; then
            echo "Failed to pull project configuration. Creating new project..."
            # Create new project
            npx vercel link --yes --token=${{ secrets.VERCEL_TOKEN }} --name="$PROJECT_NAME"
            
            # Pull again after linking
            npx vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          fi      - name: Build Project Artifacts
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_PROJECTS_API_URL: ${{ secrets.NEXT_PUBLIC_PROJECTS_API_URL }}
          NEXT_PUBLIC_PROJECTS_API_TOKEN: ${{ secrets.NEXT_PUBLIC_PROJECTS_API_TOKEN }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXT_PUBLIC_FEATURE_AUTH: ${{ secrets.NEXT_PUBLIC_FEATURE_AUTH }}
          NEXT_PUBLIC_FEATURE_ANALYTICS: ${{ secrets.NEXT_PUBLIC_FEATURE_ANALYTICS }}
          NODE_ENV: production
        run: |
          export NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL
          export NEXT_PUBLIC_SUPABASE_ANON_KEY=$NEXT_PUBLIC_SUPABASE_ANON_KEY
          export NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
          export NEXT_PUBLIC_PROJECTS_API_URL=$NEXT_PUBLIC_PROJECTS_API_URL
          export NEXT_PUBLIC_PROJECTS_API_TOKEN=$NEXT_PUBLIC_PROJECTS_API_TOKEN
          export NEXTAUTH_SECRET=$NEXTAUTH_SECRET
          export NEXTAUTH_URL=$NEXTAUTH_URL
          export NEXT_PUBLIC_FEATURE_AUTH=$NEXT_PUBLIC_FEATURE_AUTH
          export NEXT_PUBLIC_FEATURE_ANALYTICS=$NEXT_PUBLIC_FEATURE_ANALYTICS
          export NODE_ENV=production
          npx vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}      # Set environment variables in Vercel project configuration
      - name: Set Vercel Environment Variables
        run: |
          echo "Setting environment variables in Vercel project configuration..."
          
          # Use vercel env add to set the environment variables
          # This only needs to be done once per variable, but is idempotent (won't fail if var exists)
          echo "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" | npx vercel env add NEXT_PUBLIC_SUPABASE_URL production --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" | npx vercel env add NEXT_PUBLIC_SUPABASE_ANON_KEY production --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "${{ secrets.NEXT_PUBLIC_API_URL }}" | npx vercel env add NEXT_PUBLIC_API_URL production --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "${{ secrets.NEXT_PUBLIC_PROJECTS_API_URL }}" | npx vercel env add NEXT_PUBLIC_PROJECTS_API_URL production --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "${{ secrets.NEXT_PUBLIC_PROJECTS_API_TOKEN }}" | npx vercel env add NEXT_PUBLIC_PROJECTS_API_TOKEN production --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "${{ secrets.NEXTAUTH_SECRET }}" | npx vercel env add NEXTAUTH_SECRET production --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "${{ secrets.NEXTAUTH_URL }}" | npx vercel env add NEXTAUTH_URL production --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "${{ secrets.NEXT_PUBLIC_FEATURE_AUTH }}" | npx vercel env add NEXT_PUBLIC_FEATURE_AUTH production --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "${{ secrets.NEXT_PUBLIC_FEATURE_ANALYTICS }}" | npx vercel env add NEXT_PUBLIC_FEATURE_ANALYTICS production --token=${{ secrets.VERCEL_TOKEN }} || true
          
          # Ensure environment variables are applied
          npx vercel env pull --yes --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: npx vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}


