/**
 * Placeholder Types for Projects API
 * 
 * This file contains placeholder types that will be replaced when you run:
 * npm run generate:api-client
 * 
 * DO NOT EDIT THIS FILE DIRECTLY - it will be overwritten by the code generator.
 */

// Response types for each API endpoint
export interface ListAllProjectsResponse {
    status?: string;
    message?: string;
    directories?: string[];
  }

export interface InitializeProjectResponse {
  status?: string;
  message?: string;
  projectName?: string;
  projectPath?: string;
  config?: {
    repoUrl?: string;
    isTemplate?: boolean;
    projectName?: string;
    deployment?: {
      dev?: string[];
      live?: string[];
    };
    previewUrl?: string;
    liveUrl?: string;
  };
  commands?: string[];
    output?: Array<{
      command?: string;
      stdout?: string;
      stderr?: string;
      exitCode?: number;
      duration?: number;
    }>;
    gitInitialized?: boolean;
    nextSteps?: string[];
  }

export interface DeployProjectResponse {
    status?: string;
    message?: string;
    projectName?: string;
    gitStatus?: {
      hasChanges?: boolean;
      branch?: string;
    };
    commit?: {
      hash?: string;
      message?: string;
    };
    push?: {
      success?: boolean;
      remote?: string;
      branch?: string;
    };
  }

export interface StartProjectResponse {
    status?: string;
    message?: string;
    projectName?: string;
    commands?: string[];
    output?: Array<{
      command?: string;
      stdout?: string;
      stderr?: string;
      exitCode?: number;
      duration?: number;
    }>;
    duration?: number;
  }

export interface StopProjectResponse {
    status?: string;
    message?: string;
    projectName?: string;
  }

export interface CloneRepositoryResponse {
    status?: string;
    message?: string;
    projectName?: string;
    projectPath?: string;
    isFork?: boolean;
  }

export interface CreateProjectResponse {
    status?: string;
    message?: string;
    projectName?: string;
    projectPath?: string;
  }

export interface DeleteProjectResponse {
    status?: string;
    message?: string;
  }

export interface GetProjectConfigurationResponse {
    status?: string;
    message?: string;
    config?: {
      repoUrl?: string;
      isTemplate?: boolean;
      projectName?: string;
      deployment?: {
        dev?: string[];
        live?: string[];
      };
      previewUrl?: string;
      liveUrl?: string;
    };
  }

export interface UpdateProjectConfigurationResponse {
  status?: string;
  message?: string;
}

// Export a namespace for compatibility with the generated code
export const ProjectsService = {
  // This is just a placeholder to maintain the namespace structure
  // The actual implementation will be generated
};

// Placeholder for request models
export interface InitializeProjectRequest {
  commands?: string[];
  config?: {
    repoUrl?: string;
    isTemplate?: boolean;
    projectName?: string;
    deployment?: {
      dev?: string[];
    };
    previewUrl?: string;
    liveUrl?: string;
  };
  initGit?: boolean;
}

export interface DeployProjectRequest {
  commitMessage: string;
  branch?: string;
}

export interface CloneRepositoryRequest {
  repositoryUrl: string;
  projectName?: string;
  forkMode?: boolean;
}

export interface CreateProjectRequest {
  projectName: string;
  instructions?: string;
}